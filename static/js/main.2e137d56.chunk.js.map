{"version":3,"sources":["VelocityAngleMode.js","ComponentMode.js","App.js","serviceWorker.js","index.js"],"names":["VelocityAngleMode","react_default","a","createElement","Container_default","fluid","Form_default","inline","onSubmit","this","props","handleSubmit","Label","className","Control","type","name","value","velocityVector","onChange","handleChange","angleDegrees","Button_default","variant","onClick","handleReset","React","Component","ComponentMode","velX","velY","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","time","deltaTime","posX","posY","angleRadians","g","canvasHeight","canvasWidth","window","innerWidth","data","ctx","undefined","bind","assertThisInitialized","refs","canvas","getContext","event","target","angle","Math","PI","setState","cos","sin","atan2","defineProperty","_this2","preventDefault","timeOfFlight","newData","xPosition","yPosition","yVelocity","t","push","Number","parseFloat","toFixed","sqrt","atan","colorSet","Chart","labels","datasets","label","backgroundColor","borderColor","borderWidth","yAxisID","options","scales","yAxes","id","position","ticks","beginAtZero","maxTicksLimit","scaleLabel","display","labelString","xAxes","responsive","Tabs_default","defaultActiveKey","Tab_default","eventKey","title","VelocityAngleMode_VelocityAngleMode","ComponentMode_ComponentMode","ref","length","Table_default","striped","bordered","hover","map","dataPoint","Navbar_default","sticky","fixed","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e137d56.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nexport default class VelocityAngleMode extends React.Component {\n    render() {\n        return (\n            <Container fluid={true}>\n                <h2>Velocity-Angle Mode</h2>\n\n                <Form inline={true} onSubmit={this.props.handleSubmit}>\n                    <Form.Label className=\"mb-2 mr-sm-2\">Velocity of Launch (m/s)</Form.Label>\n                    <Form.Control type=\"text\" className=\"mb-2 mr-sm-2\" name=\"velocityVector\" value={this.props.velocityVector} onChange={this.props.handleChange} />\n                    <Form.Label className=\"mb-2 mr-sm-2\">Angle of Launch (Degrees)</Form.Label>\n                    <Form.Control type=\"text\" className=\"mb-2 mr-sm-2\" name=\"angleDegrees\" value={this.props.angleDegrees} onChange={this.props.handleChange} />\n                    {/*<Form.Label className=\"mb-2 mr-sm-2\">Simulation Time Step</Form.Label>\n                    <Form.Control type=\"text\" className=\"mb-2 mr-sm-2\" name=\"deltaTime\" value={this.props.deltaTime} onChange={this.props.handleChange} />\n                    */}\n                    <Button variant=\"primary\" type=\"submit\" className=\"mb-2 mr-sm-2\">Simulate!</Button>\n                    <Button variant=\"danger\" className=\"mb-2 mr-sm-2\" onClick={this.props.handleReset}>Reset</Button>\n                </Form>\n            </Container>\n        );\n    }\n}","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nexport default class ComponentMode extends React.Component {\n    render() {\n        return (\n            <Container fluid={true}>\n                <h2>Component Mode</h2>\n\n                <Form inline={true} onSubmit={this.props.handleSubmit}>\n                    <Form.Label className=\"mb-2 mr-sm-2\">X Velocity (m/s)</Form.Label>\n                    <Form.Control type=\"text\" className=\"mb-2 mr-sm-2\" name=\"velX\" value={this.props.velX} onChange={this.props.handleChange} />\n                    <Form.Label className=\"mb-2 mr-sm-2\">Y Velocity (m/s)</Form.Label>\n                    <Form.Control type=\"text\" className=\"mb-2 mr-sm-2\" name=\"velY\" value={this.props.velY} onChange={this.props.handleChange} />\n                    {/*<Form.Label className=\"mb-2 mr-sm-2\">Simulation Time Step</Form.Label>\n                    <Form.Control type=\"text\" className=\"mb-2 mr-sm-2\" name=\"deltaTime\" value={this.props.deltaTime} onChange={this.props.handleChange} />\n                    */}\n                    <Button variant=\"primary\" type=\"submit\" className=\"mb-2 mr-sm-2\">Simulate!</Button>\n                    <Button variant=\"danger\" className=\"mb-2 mr-sm-2\" onClick={this.props.handleReset}>Reset</Button>\n                </Form>\n            </Container>\n        );\n    }\n}","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport VelocityAngleMode from './VelocityAngleMode';\nimport ComponentMode from './ComponentMode';\nimport Table from 'react-bootstrap/Table';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Chart from 'chart.js';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 0, // s\n      deltaTime: 0.100,\n      posX: 0, // m\n      posY: 0, // m\n      velX: 0, // m/s\n      velY: 0, // m/s\n      angleDegrees: 0, // degrees\n      angleRadians: 0, // radians\n      velocityVector: 0, // m/s\n      g: 9.81, // m/s^2\n      canvasHeight: 400,\n      canvasWidth: window.innerWidth,\n      data: []\n    }\n\n    this.ctx = undefined;\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  componentDidMount() {\n    this.ctx = this.refs.canvas.getContext(\"2d\");\n  }\n\n  handleChange(event) {\n    if (event.target.name === \"angleDegrees\") {\n      const angle = event.target.value * (Math.PI / 180);\n      this.setState({\n        angleRadians: (angle),\n        angleDegrees: (event.target.value),\n        velX: (Math.cos(angle) * this.state.velocityVector),\n        velY: (Math.sin(angle) * this.state.velocityVector)\n      });\n    } else if (event.target.name === \"velocityVector\") {\n      this.setState({\n        velocityVector: (event.target.value),\n        velX: (Math.cos(this.state.angleRadians) * event.target.value),\n        velY: (Math.sin(this.state.angleRadians) * event.target.value)\n      });\n    } else if (event.target.name === \"velX\") {\n      const value = event.target.value;\n      const angle = Math.atan2(this.state.velY, value);\n      this.setState({\n        angleRadians: (angle),\n        angleDegrees: (angle * (180 / Math.PI)),\n        velX: (value),\n        velocityVector: (value / Math.cos(angle)),\n      });\n    } else if (event.target.name === \"velY\") {\n      const value = event.target.value;\n      const angle = Math.atan2(value, this.state.velX);\n      this.setState({\n        angleRadians: (angle),\n        angleDegrees: (angle * (180 / Math.PI)),\n        velY: (value),\n        velocityVector: (value / Math.cos(angle)),\n      });\n\n    } else {\n      this.setState({[event.target.name]: event.target.value})\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault(); // don't refresh\n\n    // kinematics equations\n    const posX = (time) => { return this.state.velX * time; }\n    const posY = (time) => { return (this.state.velY * time) - (0.5 * this.state.g * time * time); }\n    const velY = (time) => { return (this.state.velY - (this.state.g * time)); }\n    const velX = (time) => { return this.state.velX; }\n\n    // find the end posX for the end point of the graph\n    const timeOfFlight = (2 * this.state.velY) / this.state.g;\n    \n    let newData = [];\n    let xPosition = [];\n    let yPosition = [];\n    let yVelocity = [];\n\n    for (let t = 0; t <= timeOfFlight; t += this.state.deltaTime) {\n      newData.push({\n        time: Number.parseFloat(t).toFixed(3),\n        posX: Number.parseFloat(posX(t)).toFixed(3),\n        posY: Number.parseFloat(posY(t)).toFixed(3),\n        velX: Number.parseFloat(velX(t)).toFixed(3),\n        velY: Number.parseFloat(velY(t)).toFixed(3),\n        velocityVector: Number.parseFloat(Math.sqrt( (velX(t) * velX(t)) + (velY(t) * velY(t)) ).toFixed(3)),\n        angleDegrees: Number.parseFloat(Math.atan(velY(t) / velX(t)) * (180 / Math.PI) ).toFixed(3)\n      });\n      xPosition.push(Number.parseFloat(posX(t)).toFixed(3));\n      yPosition.push(Number.parseFloat(posY(t)).toFixed(3));\n      yVelocity.push(Number.parseFloat(velY(t)).toFixed(3));\n    }\n\n    let t = timeOfFlight + this.state.deltaTime;\n    newData.push({\n      time: Number.parseFloat(t).toFixed(3),\n      posX: Number.parseFloat(posX(t)).toFixed(3),\n      posY: Number.parseFloat(posY(t)).toFixed(3),\n      velX: Number.parseFloat(velX(t)).toFixed(3),\n      velY: Number.parseFloat(velY(t)).toFixed(3),\n      velocityVector: Number.parseFloat(Math.sqrt( (velX(t) * velX(t)) + (velY(t) * velY(t)) ).toFixed(3)),\n      angleDegrees: Number.parseFloat(Math.atan(velY(t) / velX(t)) * (180 / Math.PI) ).toFixed(3)\n    });\n    xPosition.push(Number.parseFloat(posX(t)).toFixed(3));\n    yPosition.push(Number.parseFloat(posY(t)).toFixed(3));\n    yVelocity.push(Number.parseFloat(velY(t)).toFixed(3));\n\n    this.setState({data: newData});\n\n    let colorSet = [\"rgba(43, 159, 243, 0.7)\", \"rgba(50, 243, 43, 0.7)\"]\n\n\n    let chart = new Chart(this.ctx, {\n      type: 'line',\n      data: {\n          labels: xPosition,\n          datasets: [\n            {\n              label: 'Height',\n              data: yPosition,\n              backgroundColor: colorSet[0],\n              borderColor: colorSet[0],\n              borderWidth: 1,\n              yAxisID: \"height\"\n            },\n            {\n              label: \"Y Velocity\",\n              data: yVelocity,\n              backgroundColor: colorSet[1],\n              borderColor: colorSet[1],\n              borderWidth: 1,\n              yAxisID: \"yVelocity\"\n            }]\n      },\n      options: {\n          scales: {\n              yAxes: [{\n                  id: 'height',\n                  type: 'linear',\n                  position: 'left',\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 50,\n                  },\n                  scaleLabel: {\n                    display: true,\n                    labelString: \"Height (m)\"\n                  }\n              }, {\n                id: 'yVelocity',\n                type: 'linear',\n                position: 'right',\n                ticks: {\n                  beginAtZero: true,\n                  maxTicksLimit: 50\n                },\n                scaleLabel: {\n                  display: true,\n                  labelString: \"Y Velocity (m/s)\"\n                }\n              }],\n              xAxes : [{\n                scaleLabel : {\n                  display: true,\n                  labelString: \"Horizontal Distance (m)\"\n                }\n              }]\n          },\n          responsive: true\n      }\n  });\n  }\n\n  handleReset() {\n    this.setState({\n      time: 0, // s\n      deltaTime: 0.1,\n      posX: 0, // m\n      posY: 0, // m\n      velX: 0, // m/s\n      velY: 0, // m/s\n      angleDegrees: 0, // degrees\n      angleRadians: 0, // radians\n      velocityVector: 0, // m/s\n      g: 9.81, // m/s^2\n      data: []\n    })\n  }\n\n  render() {\n    return (\n        <Container fluid={true}>\n          <h1 className=\"display-4\">Projectile Simulator</h1>\n          <p className=\"lead\">Select a mode from below. Velocity-Angle Mode takes the the magnitude of the initial velocity and the launch angle.\n          Component Mode takes the magnitude of each of the initial components.</p>\n          <Tabs defaultActiveKey=\"VelocityAngleMode\" id=\"mode-selector\">\n            <Tab eventKey=\"VelocityAngleMode\" title=\"Velocity-Angle Mode\">\n\n              <VelocityAngleMode\n                handleChange={this.handleChange.bind(this)}\n                handleSubmit={this.handleSubmit.bind(this)}\n                handleReset={this.handleReset.bind(this)}\n                time={this.state.time}\n                deltaTime={this.state.deltaTime}\n                posX={this.state.posX}\n                posY={this.state.posY}\n                velX={this.state.velX}\n                velY={this.state.velY}\n                angleDegrees={this.state.angleDegrees}\n                angleRadians={this.state.angleRadians}\n                velocityVector={this.state.velocityVector}\n                g={this.state.g}\n                canvasHeight={this.state.canvasHeight}\n                canvasWidth={this.state.canvasWidth} />\n\n            </Tab>\n            <Tab eventKey=\"ComponentMode\" title=\"Component Mode\">\n\n              <ComponentMode \n                handleChange={this.handleChange.bind(this)}\n                handleSubmit={this.handleSubmit.bind(this)}\n                handleReset={this.handleReset.bind(this)}\n                time={this.state.time}\n                deltaTime={this.state.deltaTime}\n                posX={this.state.posX}\n                posY={this.state.posY}\n                velX={this.state.velX}\n                velY={this.state.velY}\n                angleDegrees={this.state.angleDegrees}\n                angleRadians={this.state.angleRadians}\n                velocityVector={this.state.velocityVector}\n                g={this.state.g}\n                canvasHeight={this.state.canvasHeight}\n                canvasWidth={this.state.canvasWidth} />\n\n            </Tab>\n            <Tab eventKey=\"Chart\" title=\"View Generated Chart\">\n\n              <canvas ref=\"canvas\" id=\"canvas\"></canvas>\n\n            </Tab>\n          </Tabs>\n          {this.state.data.length > 0 && \n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>Time</th>\n                  <th>X Position</th>\n                  <th>Y Position</th>\n                  <th>X Velocity</th>\n                  <th>Y Velocity</th>\n                  <th>Speed</th>\n                  <th>Angle</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {this.state.data.map(dataPoint => (\n                  <tr>\n                  <td>{dataPoint.time} s</td>\n                  <td>{dataPoint.posX} m</td>\n                  <td>{dataPoint.posY} m</td>\n                  <td>{dataPoint.velX} m/s</td>\n                  <td>{dataPoint.velY} m/s</td>\n                  <td>{dataPoint.velocityVector} m/s</td>\n                  <td>{dataPoint.angleDegrees}&deg;</td>\n                </tr>\n                ))}\n              </tbody>\n            </Table>\n          }\n          \n          {this.state.data.length > 0 && <Navbar sticky=\"bottom\"><p className=\"small\">Copyright &copy; 2019 Pranav Avva. All Right Reserved</p></Navbar> }\n          {this.state.data.length === 0 && <Navbar fixed=\"bottom\"><p className=\"small\">Copyright &copy; 2019 Pranav Avva. All Right Reserved</p></Navbar> }\n        </Container>\n      );\n   }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}